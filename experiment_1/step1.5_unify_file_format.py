# -*- coding: utf-8 -*-
"""step2_unify_file_format.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MIaYgRnSrZz9pQZEFvxEaS4Q8aMSTy5a
"""

import json
import csv

# Input and output file paths
input_file = '/content/en-de_overlaps_test.tsv'  # Assume the user will upload this file
output_file = 'en-de.jsonl'

# Columns to extract
required_columns = ['src', 'mt', 'score', 'z_score']

# Read TSV file and write to JSONL
with open(input_file, 'r', encoding='utf-8') as tsv_file, \
     open(output_file, 'w', encoding='utf-8') as jsonl_file:

    # Use the csv module to read the TSV file
    tsv_reader = csv.reader(tsv_file, delimiter='\t')

    # Read the header row
    headers = next(tsv_reader)

    # Find the indices of the required columns
    column_indices = {}
    for column in required_columns:
        if column in headers:
            column_indices[column] = headers.index(column)
        else:
            raise ValueError(f"Column '{column}' does not exist in the TSV file!")

    # Process each row of data
    for row in tsv_reader:
        # Ensure the row has enough columns
        if len(row) >= max(column_indices.values()) + 1:
            # Create a JSON object
            json_obj = {
                "src": row[column_indices['src']],
                "mt": row[column_indices['mt']],
                "score": row[column_indices['score']],
                "z_score": row[column_indices['z_score']]
            }

            # Write in JSONL format (one JSON object per line)
            jsonl_file.write(json.dumps(json_obj, ensure_ascii=False) + '\n')
        else:
            print(f"Warning: Skipping incomplete row: {row}")

print(f"Extraction completed! File saved as {output_file}")

import json
import csv

# Input and output file paths
input_file = '/content/en-zh_overlaps_test.tsv'  # Assume the user will upload this file
output_file = 'en-zh.jsonl'

# Columns to extract
required_columns = ['src', 'mt', 'score', 'z_score']

# Read TSV file and write to JSONL
with open(input_file, 'r', encoding='utf-8') as tsv_file, \
     open(output_file, 'w', encoding='utf-8') as jsonl_file:

    # Use the csv module to read the TSV file
    tsv_reader = csv.reader(tsv_file, delimiter='\t')

    # Read the header row
    headers = next(tsv_reader)

    # Find the indices of the required columns
    column_indices = {}
    for column in required_columns:
        if column in headers:
            column_indices[column] = headers.index(column)
        else:
            raise ValueError(f"Column '{column}' does not exist in the TSV file!")

    # Process each row of data
    for row in tsv_reader:
        # Ensure the row has enough columns
        if len(row) >= max(column_indices.values()) + 1:
            # Create a JSON object
            json_obj = {
                "src": row[column_indices['src']],
                "mt": row[column_indices['mt']],
                "score": row[column_indices['score']],
                "z_score": row[column_indices['z_score']]
            }

            # Write in JSONL format (one JSON object per line)
            jsonl_file.write(json.dumps(json_obj, ensure_ascii=False) + '\n')
        else:
            print(f"Warning: Skipping incomplete row: {row}")

print(f"Extraction completed! File saved as {output_file}")

import json
import csv

# Input and output file paths
input_file = '/content/et-en_overlaps_test.tsv'  # Assume the user will upload this file
output_file = 'et-en.jsonl'

# Columns to extract
required_columns = ['src', 'mt', 'score', 'z_score']

# Read TSV file and write to JSONL
with open(input_file, 'r', encoding='utf-8') as tsv_file, \
     open(output_file, 'w', encoding='utf-8') as jsonl_file:

    # Use the csv module to read the TSV file
    tsv_reader = csv.reader(tsv_file, delimiter='\t')

    # Read the header row
    headers = next(tsv_reader)

    # Find the indices of the required columns
    column_indices = {}
    for column in required_columns:
        if column in headers:
            column_indices[column] = headers.index(column)
        else:
            raise ValueError(f"Column '{column}' does not exist in the TSV file!")

    # Process each row of data
    for row in tsv_reader:
        # Ensure the row has enough columns
        if len(row) >= max(column_indices.values()) + 1:
            # Create a JSON object
            json_obj = {
                "src": row[column_indices['src']],
                "mt": row[column_indices['mt']],
                "score": row[column_indices['score']],
                "z_score": row[column_indices['z_score']]
            }

            # Write in JSONL format (one JSON object per line)
            jsonl_file.write(json.dumps(json_obj, ensure_ascii=False) + '\n')
        else:
            print(f"Warning: Skipping incomplete row: {row}")

print(f"Extraction completed! File saved as {output_file}")

import json
import csv

# Input and output file paths
input_file = '/content/ne-en_overlaps_test.tsv'  # Assume the user will upload this file
output_file = 'ne-en.jsonl'

# Columns to extract
required_columns = ['src', 'mt', 'score', 'z_score']

# Read TSV file and write to JSONL
with open(input_file, 'r', encoding='utf-8') as tsv_file, \
     open(output_file, 'w', encoding='utf-8') as jsonl_file:

    # Use the csv module to read the TSV file
    tsv_reader = csv.reader(tsv_file, delimiter='\t')

    # Read the header row
    headers = next(tsv_reader)

    # Find the indices of the required columns
    column_indices = {}
    for column in required_columns:
        if column in headers:
            column_indices[column] = headers.index(column)
        else:
            raise ValueError(f"Column '{column}' does not exist in the TSV file!")

    # Process each row of data
    for row in tsv_reader:
        # Ensure the row has enough columns
        if len(row) >= max(column_indices.values()) + 1:
            # Create a JSON object
            json_obj = {
                "src": row[column_indices['src']],
                "mt": row[column_indices['mt']],
                "score": row[column_indices['score']],
                "z_score": row[column_indices['z_score']]
            }

            # Write in JSONL format (one JSON object per line)
            jsonl_file.write(json.dumps(json_obj, ensure_ascii=False) + '\n')
        else:
            print(f"Warning: Skipping incomplete row: {row}")

print(f"Extraction completed! File saved as {output_file}")

import json
import csv

# Input and output file paths
input_file = '/content/ro-en_overlaps_test.tsv'  # Assume the user will upload this file
output_file = 'ro-en.jsonl'

# Columns to extract
required_columns = ['src', 'mt', 'score', 'z_score']

# Read TSV file and write to JSONL
with open(input_file, 'r', encoding='utf-8') as tsv_file, \
     open(output_file, 'w', encoding='utf-8') as jsonl_file:

    # Use the csv module to read the TSV file
    tsv_reader = csv.reader(tsv_file, delimiter='\t')

    # Read the header row
    headers = next(tsv_reader)

    # Find the indices of the required columns
    column_indices = {}
    for column in required_columns:
        if column in headers:
            column_indices[column] = headers.index(column)
        else:
            raise ValueError(f"Column '{column}' does not exist in the TSV file!")

    # Process each row of data
    for row in tsv_reader:
        # Ensure the row has enough columns
        if len(row) >= max(column_indices.values()) + 1:
            # Create a JSON object
            json_obj = {
                "src": row[column_indices['src']],
                "mt": row[column_indices['mt']],
                "score": row[column_indices['score']],
                "z_score": row[column_indices['z_score']]
            }

            # Write in JSONL format (one JSON object per line)
            jsonl_file.write(json.dumps(json_obj, ensure_ascii=False) + '\n')
        else:
            print(f"Warning: Skipping incomplete row: {row}")

print(f"Extraction completed! File saved as {output_file}")

import json
import csv

# Input and output file paths
input_file = '/content/ru-en_overlaps_test.tsv'  # Assume the user will upload this file
output_file = 'ru-en.jsonl'

# Columns to extract
required_columns = ['src', 'mt', 'score', 'z_score']

# Read TSV file and write to JSONL
with open(input_file, 'r', encoding='utf-8') as tsv_file, \
     open(output_file, 'w', encoding='utf-8') as jsonl_file:

    # Use the csv module to read the TSV file
    tsv_reader = csv.reader(tsv_file, delimiter='\t')

    # Read the header row
    headers = next(tsv_reader)

    # Find the indices of the required columns
    column_indices = {}
    for column in required_columns:
        if column in headers:
            column_indices[column] = headers.index(column)
        else:
            raise ValueError(f"Column '{column}' does not exist in the TSV file!")

    # Process each row of data
    for row in tsv_reader:
        # Ensure the row has enough columns
        if len(row) >= max(column_indices.values()) + 1:
            # Create a JSON object
            json_obj = {
                "src": row[column_indices['src']],
                "mt": row[column_indices['mt']],
                "score": row[column_indices['score']],
                "z_score": row[column_indices['z_score']]
            }

            # Write in JSONL format (one JSON object per line)
            jsonl_file.write(json.dumps(json_obj, ensure_ascii=False) + '\n')
        else:
            print(f"Warning: Skipping incomplete row: {row}")

print(f"Extraction completed! File saved as {output_file}")

import json
import csv

# Input and output file paths
input_file = '/content/si-en_overlaps_test.tsv'  # Assume the user will upload this file
output_file = 'si-en.jsonl'

# Columns to extract
required_columns = ['src', 'mt', 'score', 'z_score']

# Read TSV file and write to JSONL
with open(input_file, 'r', encoding='utf-8') as tsv_file, \
     open(output_file, 'w', encoding='utf-8') as jsonl_file:

    # Use the csv module to read the TSV file
    tsv_reader = csv.reader(tsv_file, delimiter='\t')

    # Read the header row
    headers = next(tsv_reader)

    # Find the indices of the required columns
    column_indices = {}
    for column in required_columns:
        if column in headers:
            column_indices[column] = headers.index(column)
        else:
            raise ValueError(f"Column '{column}' does not exist in the TSV file!")

    # Process each row of data
    for row in tsv_reader:
        # Ensure the row has enough columns
        if len(row) >= max(column_indices.values()) + 1:
            # Create a JSON object
            json_obj = {
                "src": row[column_indices['src']],
                "mt": row[column_indices['mt']],
                "score": row[column_indices['score']],
                "z_score": row[column_indices['z_score']]
            }

            # Write in JSONL format (one JSON object per line)
            jsonl_file.write(json.dumps(json_obj, ensure_ascii=False) + '\n')
        else:
            print(f"Warning: Skipping incomplete row: {row}")

print(f"Extraction completed! File saved as {output_file}")